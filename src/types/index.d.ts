/**
 * Contents of the signed consent once decrypted
 */
export interface IDecryptedConsent {
    /**
     * The name of the service exporting data
     */
    serviceExportName: string;

    /**
     * The name of the service importing data
     */
    serviceImportName: string;

    /**
     * The name of the service exporting data
     * @deprecated
     */
    serviceExport: string;

    /**
     * The ID of the user in the Import Service's platform database
     */
    userImportId: string;

    /**
     * The ID of the user in the Export Service's platform database
     */
    userExportId: string;

    /**
     * The email of the user in the Import Service
     */
    emailImport: string;

    /**
     * The email of the user in the Export Service
     */
    emailExport: string;

    /**
     * The ID of the consent. Used to retrieve information
     * on the consented data and purpose
     */
    consentId: string;

    /**
     * The access token generated by the Export Service
     * Is only present after the token has been generated
     * and attached to the consent
     */
    token?: string;
}

export type VisionsTrustConsentImportPayload = {
    /**
     * The RSA signed consent
     */
    signedConsent: string;

    /**
     * Only concerns Interoperability services
     * @experimental
     */
    isInteropProtocol: boolean;

    /**
     * The URL of the Export Service to which the data request
     * should be made
     */
    serviceExportUrl: string;
    dataImportUrl: string;
};

export type UserIdentifier = {
    /**
     * The email of the user in the Service that registered this user
     */
    email: string;

    /**
     * The ID of the user in the Service that registered this user
     */
    userServiceId: string;
};

/**
 * Returned data after a consent has been successfully
 * verified and validated by VisionsTrust before
 * sending the data to the Import Service
 */
export type ValidationData = {
    /**
     * Verification status of the consent
     */
    verified: boolean;

    /**
     * The user information in the Export Service
     */
    userExport: UserIdentifier;

    /**
     * The user information in the Import Service
     */
    userImport: UserIdentifier;

    /**
     * The URL where the data should be sent back
     */
    dataImportEndpoint: string;

    /**
     * The list of data types the user has consented to
     * and optionally, the table and fields the data corresponds
     * to in the system's database. (Set via the DataTypes registration
     * on VisionsTrust's dashboard)
     */
    datatypes: {
        /**
         * Name of the DataType as registered on VisionsTrust
         */
        name: string;

        /**
         * Name of the table if registered
         */
        table: string | null;

        /**
         * Name of corresponding fields if registered
         */
        fields: string[] | null;
    }[];
};
